{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-undef, stdlib/jsdoc-doctest */ // TODO: remove once `array/float16` added; consider refactoring similar to `assert/is-complex128array`\n\n'use strict';\n\n// MODULES //\n\nvar nativeClass = require( '@stdlib/utils-native-class' );\n\n\n// VARIABLES //\n\nvar hasFloat16Array = ( typeof Float16Array === 'function' );\n\n\n// MAIN //\n\n/**\n* Tests if a value is a Float16Array.\n*\n* @param {*} value - value to test\n* @returns {boolean} boolean indicating whether value is a Float16Array\n*\n* @example\n* var Float16Array = require( '@stdlib/array-float16' );\n*\n* var bool = isFloat16Array( new Float16Array( 10 ) );\n* // returns true\n*\n* @example\n* var bool = isFloat16Array( [] );\n* // returns false\n*/\nfunction isFloat16Array( value ) {\n\treturn (\n\t\t( hasFloat16Array && value instanceof Float16Array ) ||\n\t\tnativeClass( value ) === '[object Float16Array]'\n\t);\n}\n\n\n// EXPORTS //\n\nmodule.exports = isFloat16Array;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Test if a value is a Float16Array.\n*\n* @module @stdlib/assert-is-float16array\n*\n* @example\n* var Float16Array = require( '@stdlib/array-float16' );\n* var isFloat16Array = require( '@stdlib/assert-is-float16array' );\n*\n* var bool = isFloat16Array( new Float16Array( 10 ) );\n* // returns true\n*\n* bool = isFloat16Array( [] );\n* // returns false\n*/\n\n// MODULES //\n\nvar isFloat16Array = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = isFloat16Array;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAwBA,IAAIC,EAAc,QAAS,4BAA6B,EAKpDC,EAAoB,OAAO,cAAiB,WAqBhD,SAASC,EAAgBC,EAAQ,CAChC,OACGF,GAAmBE,aAAiB,cACtCH,EAAaG,CAAM,IAAM,uBAE3B,CAKAJ,EAAO,QAAUG,ICtBjB,IAAIE,EAAiB,IAKrB,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "nativeClass", "hasFloat16Array", "isFloat16Array", "value", "isFloat16Array"]
}
